# Default values for opentelemetry-collector.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

honeycomb:
  # Specify your Honeycomb API KEY to send events
  apiKey: YOUR_API_KEY
  # Specify host URL to send all events to
  apiHost: https://api.honeycomb.io/
  # Specify the name of the dataset to send data to
  dataset: opentelemetry-collector
  # Specify the name of an existing secret resource containing your Honeycomb API KEY instead of having a secret resource created
  # existingSecret:
  # (Optional): Constant sample rate. Can be used to send 1 / x events to Honeycomb. Defaults to 1 (always sample).
  # sample_rate: 1


config:
  receivers:
    otlp:
      protocols:
        grpc:
        http:
    jaeger:
      protocols:
        grpc:
        thrift_http:
    zipkin:

  processors:
    batch:
    memory_limiter:
      # memory ballast size should be max 1/3 to 1/2 of pod memory limits
      ballast_size_mib: 683
      # 80% of maximum memory up to 2G
      limit_mib: 400
      # 25% of limit up to 2G
      spike_limit_mib: 100
      # How often to check for memory limits      
      check_interval: 5s
      
  extensions:
    health_check:
      port: 13133

  service:
    extensions: [health_check]
    pipelines:
      traces:
        receivers: [otlp, jaeger, zipkin]
        processors: [memory_limiter, batch]
        exporters: [honeycomb]


nameOverride: ""
fullnameOverride: ""
imagePullSecrets: []

image:
  repository: otel/opentelemetry-collector-contrib
  # Overrides the image tag whose default is the chart version.
  tag: ""  
  pullPolicy: IfNotPresent


# used if autoscaling.enabled is false
replicaCount: 1

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  annotations: {}

ports: # configures both service, and deployment
  otlp:
    enabled: true
    containerPort: 55680 # "legacy" port for backwards compatibility
    servicePort: 55680
    protocol: TCP
  otlp-http:
    enabled: true
    containerPort: 55681 # http server starts up on 55681
    servicePort: 55681
    protocol: TCP
  otlp-grpc:
    enabled: true
    containerPort: 4317 # new service port
    servicePort: 4317
    protocol: TCP
  jaeger-http:
    enabled: true
    containerPort: 14268
    servicePort: 14268
    protocol: TCP
  jaeger-binary:
    enabled: true
    containerPort: 6832
    servicePort: 6832
    protocol: TCP
  jaeger-compact:
    enabled: true
    containerPort: 6831
    servicePort: 6831
    protocol: TCP
  jaeger-grpc:
    enabled: true
    containerPort: 14250
    servicePort: 14250
    protocol: TCP
  zipkin:
    enabled: true
    containerPort: 9411
    servicePort: 9411
    protocol: TCP

# Resource memory limits should be modified in conjunction with memory_limiter processor
resources: 
  limits:
    cpu: 1000m
    memory: 2Gi
  requests:
    cpu: 200m
    memory: 400Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

k8sProcessor:
  rbac:
    # Specifies whether roles based access control rules should be created.
    create: false
    name: ""


serviceAccount:
  # Specifies whether a service account should be created.
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
  # Annotations to add to the service account
  annotations: {}
