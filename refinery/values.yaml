# Default values for refinery.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 2

image:
  repository: honeycombio/refinery
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""


# Values used to build config.yaml
config:
  ListenAddr: 0.0.0.0:8080
  PeerListenAddr: 0.0.0.0:8081
  HoneycombAPI: https://api.honeycomb.io
  LoggingLevel: error
  SendDelay: 2s
  TraceTimeout: 300s
  SendTicker: 100ms
  UpstreamBufferSize: 1000
  PeerBufferSize: 1000

  InMemCollector:
    CacheCapacity: 1000
    MaxAlloc: 0

  # Implementation Choices
  Logger: logrus
  Metrics: prometheus

#   HoneycombLogger:
#     LoggerHoneycombAPI: https://api.honeycomb.io
#     LoggerAPIKey: YOUR_API_KEY
#     LoggerDataset: refinery-logs

#   HoneycombMetrics:
#     MetricsHoneycombAPI: https://api.honeycomb.io
#     MetricsAPIKey: YOUR_API_KEY
#     MetricsDataset: refinery-metrics
#     MetricsReportingInterval: 3

  PrometheusMetrics:
    MetricsListenAddr: 0.0.0.0:9090


# Values used to build rules.yaml
rules:
#  DryRun: false
  Sampler: DeterministicSampler
  SampleRate: 1


# Redis configuration
redis:
  enabled: true
  # existingHost:
  image:
    repository: redis
    tag: 6.0.2
    pullPolicy: IfNotPresent


# Creates service monitor to collect prom metrics (depends on kube-prom)
# prometheus:
#   serviceMonitor:
#     create: true
#     namespace: monitoring
prometheus:
  serviceMonitor:
    create: false


serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  limits:
    cpu: 1000m
    memory: 2Gi
  requests:
    cpu: 500m
    memory: 500Mi

nodeSelector: {}

tolerations: []

affinity: {}
