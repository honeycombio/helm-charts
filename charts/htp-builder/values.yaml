# The Honeycomb Management API key used to authenticate and authorize your pipeline's interactions with Honeycomb.
# See https://docs.honeycomb.io/configure/teams/manage-api-keys/#find-management-api-keys for more details.
managementApiKey:
  # The public ID of you mangement API key.
  id: ""
  # The kubernetes secret used to provide secret the part of your management API key.
  secret:
    # The name of the kubernetes secret
    name: "htp-builder"
    # The key in the kubernetes secret that stores the secret the part of your management API key.
    key: "management-api-secret"

global:
  # The ID of your pipeline installation.
  # This can be found on the Pipeline Installations page in the Honeycomb UI.
  pipeline:
    id: ""

  # This setting configures the default endpoints. All endpoints can still be configured and will take precedence.
  # The default value is 'us1'.
  # Other valid values are:
  #  - eu1
  #  - custom
  #
  # When 'us1' is selected, the endpoints for all services are set to https://api.honeycomb.io.
  # When 'eu1' is selected, the endpoints for all services are set to https://api.eu1.honeycomb.io.
  #
  # Any values you've configured will take precedence.
  region: "us1"

  # This setting will override any regional setting applied.
  # You must not include the trailing slash, this must only be a domain and protocol (e.g. https://api.honeycomb.io).
  # Note: in order to use this setting, region must be set to "custom"
  customEndpoint: ""

# Configuration options for Refinery.
# For a complete list of configuration options see https://github.com/honeycombio/helm-charts/tree/main/charts/refinery#configuration.
refinery:
  image:
    repository: honeycombio/refinery
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "2.9.5"
  config:
    General:
      ConfigurationVersion: 2
      MinRefineryVersion: v2.0
    PeerManagement:
      Type: redis
      # IdentifierInterfaceName specifies a network interface to use when finding a local hostname.
      # Due to the nature of DNS in Kubernetes, it is recommended to set this value to the 'eth0' interface name.
      # When configured the pod's IP will be used in the peer list
      IdentifierInterfaceName: eth0
    RedisPeerManagement:
      # Host is the host and port of the Redis instance to use for peer cluster membership management.
      Host: '{{include "htp-builder.fullname" .}}-refinery-redis:6379'
    Collection:
      ShutdownDelay: '{{ sub .Values.refinery.terminationGracePeriodSeconds 5 }}s'
      # AvailableMemory is the amount of system memory available to the Refinery process.
      AvailableMemory: '{{ .Values.refinery.resources.limits.memory }}'
      MaxMemoryPercentage: 75
    GRPCServerParameters:
      Enabled: true
      ListenAddr: 0.0.0.0:4317
    RefineryTelemetry:
      AddRuleReasonToTrace: true
    OpAMP:
      Enabled: true
      Endpoint: "ws://{{ include \"htp-builder.beekeeperName\" . }}:4320/v1/opamp"
      RecordUsage: false
    OTelMetrics:
      Enabled: true
    Logger:
      Type: honeycomb

  # Refinery rules.
  # This section allows configuring Refinery rules.
  # The default value is the bare minimum Refinery requires in order to run.
  # It is highly recommend to set your own rules.
  # When using the operators `>`, `>=` or `!=`, indicate that they are strings by enclosing them in single quotes, like ('>=').
  # See https://docs.honeycomb.io/manage-data-volume/refinery/sampling-methods/ for how to configure Refinery rules.
  rules:
    RulesVersion: 2
    Samplers: {}
      # The default sampler is used when no other sampler matches.
      # It is required to have a default sampler.
      # If you do not supply a default sampler the helm chart will inject
      # the DeterministicSampler shown below.
      # __default__:
      #     DeterministicSampler:
      #         SampleRate: 1

  ## Scaling Refinery ##
  #
  # Since Refinery is a stateful service we recommend provisioning refinery
  # for your anticipated peak load and using Stress Relief to minimize impact
  # from changes in cluster membership.
  #
  # Use replicaCount and resource limits to set the size of your Refinery cluster
  # per your anticipated peak load.
  # replicaCount is ignored if autoscaling is enabled
  replicaCount: 3

  resources:
    limits:
      cpu: 2000m
      # This value is used by default for refinery.config.Collection.AvailableMemory
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 500Mi

  # liveness probe configuration
  # Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
  livenessProbe:
    initialDelaySeconds: 5
    periodSeconds: 3
    timeoutSeconds: 1
    failureThreshold: 3

  # readiness probe configuration
  # Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
  readinessProbe:
    initialDelaySeconds: 5
    periodSeconds: 1
    timeoutSeconds: 1
    failureThreshold: 1

  extraEnvs:
    # Default key for the HPSF Honeycomb Exporter
    - name: HONEYCOMB_EXPORTER_APIKEY
      valueFrom:
        secretKeyRef:
          name: htp-builder
          key: api-key
    # Env var for exporting refinery internal telemetry
    - name: REFINERY_HONEYCOMB_API_KEY
      valueFrom:
        secretKeyRef:
          name: htp-builder
          key: api-key

  # Use to map additional volumes into the Refinery pods
  # Useful for volume-based secrets
  extraVolumeMounts: []
    # - name: honeycomb-secrets
    #   mountPath: "/mnt/secrets-store"
    #   readOnly: true

  # Use to map additional volumes into the Refinery pods
  extraVolumes: []
    # - name: honeycomb-secrets
    #   csi:
    #     driver: secrets-store.csi.k8s.io
    #     readOnly: true
    #     volumeAttributes:
    #       secretProviderClass: "honeycomb-secrets"

  # Redis configuration
  redis:
    # To install a simple single pod Redis deployment set this to true.
    # If false, you must specify a value for existingHost
    # For production, it is recommended to set this to false and provide
    # a highly available Redis configuration using redis.existingHost
    enabled: true

    # If redis.enabled is true, this the image that will be used to create
    # the Redis deployment
    image:
      repository: redis
      tag: 7.2
      pullPolicy: IfNotPresent

    resources: {}
      # limits:
      #   cpu: 500m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 50Mi

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  service:
    port: 80
    grpcPort: 4317

  terminationGracePeriodSeconds: 35

# Configuration options for Beekeeper.
beekeeper:
  image:
    repository: "honeycombio/beekeeper"
    pullPolicy: IfNotPresent
    tag: "v0.0.14-alpha"

  # The Honeycomb API endpoint Beekeeper should use.
  # When unset (the default), Beekeeper will use https://api.honeycomb.io
  endpoint: ""

  # Allows configuring Beekeeper environment variables.
  defaultEnv:
    HONEYCOMB_API_KEY:
      content:
        valueFrom:
          secretKeyRef:
            name: htp-builder
            key: api-key
    LOG_LEVEL:
      enabled: true
      content:
        value: "info"
    # Enabled this env var if you want Beekeeper to create markers during rollouts.
    HONEYCOMB_CONFIGURATION_KEY:
      enabled: false
      content:
        valueFrom:
          secretKeyRef:
            name: htp-builder
            key: configuration-key
    # Configures how many agents per type to rollout at a time.
    # By default Beekeeper will rollout configuration changes to 1
    # Primary Collector and 1 Refinery at a time.
    # If you increase the replicaCounts of the Primary Collector or Refinery
    # Consider increase this value.
    DEPLOYMENT_BATCH_SIZE:
      enabled: true
      content:
        value: "1"
  extraEnvs: []

  # Resource limits & requests.
  # It is HIGHLY recommended to set resource limits.
  # resources:
  #   limits:
  #     cpu: 50m
  #     memory: 50Mi
  resources: {}

  serviceAccount:
    create: true
    # Name of the service account to use if not creating a new one.
    name: ""

  persistentVolumeClaimName: ""
  volumes: []
  volumeMounts: []

  # Settings for Beekeeper's internal telemetry.
  telemetry:
    enabled: true
    # Beekeeper's OTel SDK Configuration.
    config:
      file_format: "0.3"
      propagator:
        composite:
          - tracecontext
          - baggage
      tracer_provider:
        processors:
          - batch:
              exporter:
                otlp:
                  protocol: http/protobuf
                  endpoint: '{{ include "htp-builder.beekeeper.telemetryEndpoint" . }}'
                  headers:
                  - name: "x-honeycomb-team"
                    value: ${HONEYCOMB_API_KEY}
      meter_provider:
        readers:
          - periodic:
              exporter:
                otlp:
                  protocol: http/protobuf
                  endpoint: '{{ include "htp-builder.beekeeper.telemetryEndpoint" . }}'
                  headers:
                  - name: "x-honeycomb-team"
                    value: ${HONEYCOMB_API_KEY}
                  - name: "x-honeycomb-dataset"
                    value: "beekeeper-metrics"
                  temporality_preference: delta
      logger_provider:
        processors:
          - batch:
              exporter:
                otlp:
                  protocol: http/protobuf
                  endpoint: '{{ include "htp-builder.beekeeper.telemetryEndpoint" . }}'
                  headers:
                  - name: "x-honeycomb-team"
                    value: ${HONEYCOMB_API_KEY}

# Configuration options for the Primary Collector.
primaryCollector:
  serviceAccount:
    create: true
    # Name of the service account to use if not creating a new one.
    name: ""

  service:
    enabled: true
    ports:
      - name: otlp
        port: 4317
        targetPort: 4317
        protocol: TCP
        appProtocol: grpc
      - name: otlp-http
        port: 4318
        targetPort: 4318
        protocol: TCP

  # Resource limits & requests.
  # It is HIGHLY recommended to set resource limits.
  # resources:
  #   limits:
  #     cpu: 250m
  #     memory: 512Mi
  resources: {}

  # Number of replicas to deploy
  replicaCount: 2

  image:
    repository: "honeycombio/supervised-collector"
    pullPolicy: IfNotPresent
    tag: "v0.0.6"

  defaultEnv:
    HONEYCOMB_API_KEY:
      enabled: true
      content:
        valueFrom:
          secretKeyRef:
            name: htp-builder
            key: api-key
    STRAWS_REFINERY_SERVICE:
      enabled: true
      content:
        # If you change the refinery service name via refinery.nameOverride or refinery.fullnameOverride
        # you'll need to change this value too.
        value: '{{ include "htp-builder.fullname" . }}-refinery'
  extraEnvs: []

  volumes: []
  volumeMounts: []

  # configuration options for the agent (a collector) the OpAMP Supervisor manages
  agent:
    configApplyTimeout: 30s
    telemetry:
      enabled: true
      defaultEndpoint: ""
      defaultServiceName: "primary-collector"
      file: /etc/agent/config.yaml
      config:
        metrics:
          readers:
            - periodic:
                exporter:
                  otlp:
                    endpoint: '{{ include "htp-builder.primaryCollector.agent.telemetry.defaultEndpoint" . }}'
                    headers:
                      - name: x-honeycomb-dataset
                        value: primary-collector-metrics
                      - name: x-honeycomb-team
                        value: ${env:HONEYCOMB_API_KEY}
                    protocol: http/protobuf
                    temporality_preference: delta
        logs:
          encoding: json
          processors:
            - batch:
                exporter:
                  otlp:
                    endpoint: '{{ include "htp-builder.primaryCollector.agent.telemetry.defaultEndpoint" . }}'
                    headers:
                      - name: x-honeycomb-team
                        value: ${env:HONEYCOMB_API_KEY}
                    protocol: http/protobuf

  # configuration options for the OpAMP Supervisor.
  opampsupervisor:
    telemetry:
      # Enables the OpAMP Supervisor's internal telemetry.
      enabled: true
      # Default endpoint for telemetry data.
      # When unset (the default), the endpoint will be set to https://api.honeycomb.io.
      defaultEndpoint: ""
      defaultServiceName: opamp-supervisor
      # The OpAMP Supervisor's configuration file.
      config:
        resource:
          'service.name': '{{ .Values.primaryCollector.opampsupervisor.telemetry.defaultServiceName }}'
        logs:
          level: info
          processors:
            - batch:
                exporter:
                  otlp:
                    protocol: http/protobuf
                    endpoint: '{{ include "htp-builder.primaryCollector.opampsupervisor.telemetry.defaultEndpoint" . }}'
                    headers:
                    - name: "x-honeycomb-team"
                      value: ${HONEYCOMB_API_KEY}
